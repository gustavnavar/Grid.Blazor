@page "/crud"
@page "/crud/{OrderId}/{Mode}"
@using GridBlazorClientSide.Client.ColumnCollections
@using GridBlazorClientSide.Shared.Models
@using Microsoft.Extensions.Primitives
@using System.Globalization
@using System.Threading.Tasks
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject ICrudDataService<Order> orderService

<h1>Grid Sample</h1>

<p>
    This page contains a CRUD grid
</p>

<p>
    This component demonstrates a GridBlazor client-side grid. For more information, please see: <a href="https://github.com/gustavnavar/Grid.Blazor">https://github.com/gustavnavar/Grid.Blazor</a>
</p>

@if (_task.IsCompleted)
{
    <div class="row">
        <div class="col-md-12">
            <GridComponent T="Order" @ref="_gridComponent" Grid="@_grid" Mode="_mode" Keys="_keys"></GridComponent>
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@code
{
    private CGrid<Order> _grid;
    private GridComponent<Order> _gridComponent;
    private bool _areEventsLoaded = false;
    private object[] _keys;
    private GridMode _mode;
    private Task _task;

    [Parameter]
    public string OrderId { get; set; }

    [Parameter]
    public string Mode { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var locale = CultureInfo.CurrentCulture;

        var query = new QueryDictionary<StringValues>();
        string url = NavigationManager.BaseUri + "api/SampleData/OrderColumnsWithCrud";

        var client = new GridClient<Order>(HttpClient, url, query, false, "ordersGrid", c =>
            ColumnCollections.OrderColumnsWithCrud(c, NavigationManager.BaseUri), locale)
            .Sortable()
            .Filterable()
            .SetStriped(true)
            .Crud(true, orderService)
            .WithMultipleFilters()
            .WithGridItemsCount();

        _grid = client.Grid;

        if (!string.IsNullOrWhiteSpace(OrderId))
        {
            int orderId;
            bool result = int.TryParse(OrderId, out orderId);
            if (result)
            {
                if (Mode.ToLower() == "create")
                {
                    _keys = new object[] { orderId };
                    _mode = GridMode.Create;
                }
                else if (Mode.ToLower() == "read")
                {
                    _keys = new object[] { orderId };
                    _mode = GridMode.Read;
                }
                else if (Mode.ToLower() == "update")
                {
                    _keys = new object[] { orderId };
                    _mode = GridMode.Update;
                }
                else if (Mode.ToLower() == "delete")
                {
                    _keys = new object[] { orderId };
                    _mode = GridMode.Delete;
                }
            }
        }

        // Set new items to grid
        _task = client.UpdateGrid();
        await _task;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!_areEventsLoaded && _gridComponent != null)
        {
            _gridComponent.BeforeInsert += BeforeInsert;
            _gridComponent.BeforeUpdate += BeforeUpdate;
            _gridComponent.BeforeDelete += BeforeDelete;
            _areEventsLoaded = true;
        }
    }

    private async Task<bool> BeforeInsert(GridCreateComponent<Order> component, Order item)
    {
        var orderValidator = new OrderValidator();
        var valid = await orderValidator.ValidateAsync(item);

        if (!valid.IsValid)
        {
            component.Error = "Insert operation returned one or more errors";
            foreach (var error in valid.Errors)
            {
                component.ColumnErrors.AddParameter(error.PropertyName, error.ErrorMessage);
            }
        }

        return valid.IsValid;
    }

    private async Task<bool> BeforeUpdate(GridUpdateComponent<Order> component, Order item)
    {
        var orderValidator = new OrderValidator();
        var valid = await orderValidator.ValidateAsync(item);

        if (!valid.IsValid)
        {
            component.Error = "Update operation returned one or more errors";
            foreach (var error in valid.Errors)
            {
                component.ColumnErrors.AddParameter(error.PropertyName, error.ErrorMessage);
            }
        }

        return valid.IsValid;
    }

    private async Task<bool> BeforeDelete(GridDeleteComponent<Order> component, Order item)
    {
        var orderValidator = new OrderValidator();
        var valid = await orderValidator.ValidateAsync(item);

        if (!valid.IsValid)
        {
            component.Error = valid.ToString();
        }

        return valid.IsValid;
    }
}
