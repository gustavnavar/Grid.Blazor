@page "/extsorting"
@using GridBlazorClientSide.Client.ColumnCollections
@using GridBlazorClientSide.Shared.Models
@using GridShared.Sorting
@using Microsoft.Extensions.Primitives
@using System.Globalization
@using System.Threading.Tasks
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<h1>Extended Sorting Grid</h1>

<p>
    This page contains a grid with extended sorting enabled. Column titles can be dragged and dropped to the sorting box.
</p>

<p>
    This component demonstrates a GridBlazor client-side grid. For more information, please see: <a href="https://github.com/gustavnavar/Grid.Blazor">https://github.com/gustavnavar/Grid.Blazor</a>
</p>

@if (_task.IsCompleted)
{
    <div class="row">
        <div class="col-md-12">
            <GridComponent T="Order" Grid="@_grid"></GridComponent>
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@code
{
    private CGrid<Order> _grid;
    private Task _task;
    private bool _initExtSorting = false;

    protected override async Task OnParametersSetAsync()
    {
        var locale = CultureInfo.CurrentCulture;
        
        var companyNames = await HttpClient.GetFromJsonAsync<string[]>(NavigationManager.BaseUri + $"api/SampleData/GetCustomersNames");
        var companyNamesArray = companyNames?
            .Select(name => new SelectItem(name, name))
            .ToArray() ?? Array.Empty<SelectItem>();
        var columns = ColumnCollections.OrderColumnsExtSorting(companyNamesArray);

        var query = new QueryDictionary<StringValues>();
        string url = NavigationManager.BaseUri + "api/SampleData/GetOrdersGridExtSorting";
        var client = new GridClient<Order>(HttpClient, url, query, false, "ordersGrid", ColumnCollections.OrderColumnsExtSorting, locale)
            .Sortable()
            .Filterable()
            .SetStriped(true)
            .WithMultipleFilters()
            .WithGridItemsCount()
            .ExtSortable(true);

        _grid = client.Grid;
        // Set new items to grid
        _task = client.UpdateGrid();
        await _task;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_grid.GridComponent != null && !_initExtSorting)
        {
            var payloads = new List<ColumnOrderValue>();
            payloads.Add(new ColumnOrderValue("Customer.CompanyName", GridSortDirection.Ascending, 1));
            await _grid.GridComponent.InitExtSorting(payloads);
            _initExtSorting = true;
        }
    }
}
