@page "/comparer"
@using GridBlazorClientSide.Client.ColumnCollections
@using GridBlazorClientSide.Client.Services
@using GridBlazorClientSide.Shared.Models
@using Microsoft.Extensions.Primitives
@using System.Globalization
@using System.Threading.Tasks
@inject IOrderGridInMemoryService orderGridInMemoryService

<h1>Using a sorting comparer for an in-memory grid</h1>

<p>
    This page contains a grid using a string comparer for sorting. It only works for grids with all items in memory.
</p>

<p>
    In this sample the first letter of the company name is removed and the rest of the word is sorted.
</p>

<p>
    This component demonstrates a GridBlazor client-side grid. For more information, please see: <a href="https://github.com/gustavnavar/Grid.Blazor">https://github.com/gustavnavar/Grid.Blazor</a>
</p>

@if (_task.IsCompleted)
{
    <div class="row">
        <div class="col-md-12">
            <GridComponent T="Order" Grid="@_grid"></GridComponent>
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@code
{
    private CGrid<Order> _grid;
    private Task _task;

    protected override async Task OnParametersSetAsync()
    {
        var locale = CultureInfo.CurrentCulture;

        var query = new QueryDictionary<StringValues>();
        //query.Add("grid-filter", "Customer.Country__1__usa");

        var comparer = new SampleComparer(StringComparer.OrdinalIgnoreCase);
        Action<IGridColumnCollection<Order>> colums = c => ColumnCollections.OrderColumnsWithComparer(c, comparer);

        var client = new GridClient<Order>(q => orderGridInMemoryService.GetOrdersGridRowsInMemory(colums, q),
            query, false, "ordersGrid", colums, locale)
            .Sortable()
            .Filterable()
            .SetStriped(true)
            .WithMultipleFilters()
            .WithGridItemsCount();

        _grid = client.Grid;
        // Set new items to grid
        _task = client.UpdateGrid();
        await _task;
    }
}
