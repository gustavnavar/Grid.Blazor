@page "/editorder/{OrderId}/{ReturnUrl}/{GridState}"
@page "/editorder/{OrderId}/{ReturnUrl}/{GridState}/{AltGridState}"
@using GridBlazorClientSide.Shared.Models
@using System.Globalization
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1>Edit page</h1>

<p>
    This page allows order edit and returns to the correct calling page including grid states.
</p>

<p>
    This component demonstrates a GridBlazor client-side grid. For more documentation, please see: <a href="https://github.com/gustavnavar/Grid.Blazor">https://github.com/gustavnavar/Grid.Blazor</a>
</p>

@if (_order == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="form-horizontal">
        <div class="form-group">
            <label for="OrderID" class="control-label col-md-2">OrderID: </label>
            <div class="col-md-5">
                <input id="OrderID" name="OrderID" class="form-control" readonly="readonly" @bind="_order.OrderID" />
            </div>
        </div>

        <div class="form-group">
            <label for="CompanyName" class="control-label col-md-2">Customer: </label>
            <div class="col-md-5">
                <input id="CompanyName" name="CompanyName" class="form-control" readonly="readonly" @bind="_order.Customer.CompanyName" />
            </div>
        </div>

        <div class="form-group">
            <label for="OrderDate" class="control-label col-md-2">Order Date: </label>
            <div class="col-md-5">
                <input id="OrderDate" name="OrderDate" type="date" class="form-control" value="@ToDateString(_order.OrderDate)" @onchange="ChangeOrderDate" />
            </div>
        </div>

        <div class="form-group">
            <label for="RequiredDate" class="control-label col-md-2">Required Date: </label>
            <div class="col-md-5">
                <input id="RequiredDate" name="RequiredDate" type="date" class="form-control" value="@ToDateString(_order.RequiredDate)" @onchange="ChangeRequiredDate" />
            </div>
        </div>

        <div class="form-group">
            <label for="ShippedDate" class="control-label col-md-2">Shipped Date: </label>
            <div class="col-md-5">
                <input id="ShippedDate" name="ShippedDate" type="date" class="form-control" value="@ToDateString(_order.ShippedDate)" @onchange="ChangeShippedDate" />
            </div>
        </div>

        <div class="form-group">
            <label for="ShipName" class="control-label col-md-2">Ship Name: </label>
            <div class="col-md-5">
                <input id="ShipName" name="ShipName" class="form-control" @bind="_order.ShipName" />
            </div>
        </div>

        <div class="form-group">
            <label for="ShipAddress" class="control-label col-md-2">Ship Address: </label>
            <div class="col-md-5">
                <input id="ShipAddress" name="ShipAddress" class="form-control" @bind="_order.ShipAddress" />
            </div>
        </div>

        <div class="form-group">
            <label for="ShipCity" class="control-label col-md-2">Ship City: </label>
            <div class="col-md-5">
                <input id="ShipCity" name="ShipCity" class="form-control" @bind="_order.ShipCity" />
            </div>
        </div>

        <div class="form-group">
            <label for="ShipPostalCode" class="control-label col-md-2">Ship Postal Code: </label>
            <div class="col-md-5">
                <input id="ShipPostalCode" name="ShipPostalCode" class="form-control" @bind="_order.ShipPostalCode" />
            </div>
        </div>

        <div class="form-group">
            <label for="ShipRegion" class="control-label col-md-2">Ship Region: </label>
            <div class="col-md-5">
                <input id="ShipRegion" name="ShipRegion" class="form-control" @bind="_order.ShipRegion" />
            </div>
        </div>

        <div class="form-group">
            <label for="ShipCountry" class="control-label col-md-2">Ship Country: </label>
            <div class="col-md-5">
                <input id="ShipCountry" name="ShipCountry" class="form-control" @bind="_order.ShipCountry" />
            </div>
        </div>

        <div class="form-group">
            <label for="Freight" class="control-label col-md-2">Freight: </label>
            <div class="col-md-5">
                <input id="Freight" name="Freight" class="form-control" @bind="_order.Freight" />
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-5">
                <input id="CustomerID" name="CustomerID" type="hidden" value="@_order.CustomerID" />
                <input id="EmployeeID" name="EmployeeID" type="hidden" value="@_order.EmployeeID" />
                <input id="ShipVia" name="ShipVia" type="hidden" value="@_order.ShipVia" />
                <button type="submit" class="btn btn-primary btn-md" @onclick="UpdateOrder">Save</button>
                <button type="button" class="btn btn-primary btn-md" @onclick="Back">Back</button>
            </div>
        </div>
    </div>
}

@code
{
    private Order _order;

    [Parameter]
    public string OrderId { get; set; }

    [Parameter]
    public string ReturnUrl { get; set; }

    [Parameter]
    public string GridState { get; set; }

    [Parameter]
    public string AltGridState { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _order = await Http.GetJsonAsync<Order>($"api/Order/{Convert.ToInt32(OrderId)}");
    }

    private async Task UpdateOrder()
    {
        await Http.PutJsonAsync($"api/Order/{Convert.ToInt32(OrderId)}", _order);
        NavigationManager.NavigateTo($"{ReturnUrl}/{GridState}/{AltGridState}");
    }

    private void Back()
    {
        NavigationManager.NavigateTo($"{ReturnUrl}/{GridState}/{AltGridState}");
    }

    private void ChangeOrderDate(ChangeEventArgs e)
    {
        DateTime date;
        DateTime.TryParse(e.Value.ToString(), out date);
        if (date != null && date != default(DateTime))
            _order.OrderDate = date;
    }

    private void ChangeRequiredDate(ChangeEventArgs e)
    {
        DateTime date;
        DateTime.TryParse(e.Value.ToString(), out date);
        if (date != null && date != default(DateTime))
            _order.RequiredDate = date;
    }

    private void ChangeShippedDate(ChangeEventArgs e)
    {
        DateTime date;
        DateTime.TryParse(e.Value.ToString(), out date);
        if (date != null && date != default(DateTime))
            _order.ShippedDate = date;
    }

    private string ToDateString(DateTime? date)
    {
        if (date.HasValue)
        {
            return date.Value.ToString("yyyy'-'MM'-'dd");
        }
        else
        {
            return "";
        }
    }
}
