@page "/checkbox"
@using GridBlazor.Resources
@using GridBlazorOData.Client.Resources
@using GridBlazorOData.Shared.Models
@using Microsoft.Extensions.Primitives
@using System.Globalization
@using System.Threading.Tasks
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<h1>Grid Sample</h1>

<p>
    This page contains a grid with a checkbox column
</p>

<p>
    This component demonstrates a GridBlazor client-side grid with an OData back-end. For more information, please see: <a href="https://github.com/gustavnavar/Grid.Blazor">https://github.com/gustavnavar/Grid.Blazor</a>
</p>

@if (_task.IsCompleted)
{
    <div class="row mb-3">
        <button type="button" class="btn btn-primary" @onclick="ButtonHandler" @onclick:stopPropagation>Change First</button>
    </div>
    <div class="row">
        <div class="col-md-12">
            <GridComponent @ref="component" T="Order" Grid="@_grid"></GridComponent>
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@code
{
    private CGrid<Order> _grid;
    private Task _task;
    private GridComponent<Order> component;
    private bool _shouldRender = false;

    protected override async Task OnParametersSetAsync()
    {
        var locale = CultureInfo.CurrentCulture;

        var query = new QueryDictionary<StringValues>();

        Action<IGridColumnCollection<Order>> columns = c =>
        {
            c.Add("CheckboxColumn").SetCheckboxColumn(true, o => o.Customer.IsVip).SetWidth(40);
            c.Add(o => o.OrderID).SetPrimaryKey(true).Titled(SharedResource.Number).SetWidth(100);
            c.Add(o => o.OrderDate, "OrderCustomDate").Titled(SharedResource.OrderCustomDate).SetWidth(120).RenderComponentAs<TooltipCell>();
            c.Add(o => o.Customer.CompanyName).Titled(SharedResource.CompanyName).SetWidth(250);
            c.Add(o => o.Customer.ContactName).Titled(SharedResource.ContactName).SetWidth(250);
            c.Add(o => o.Freight).Titled(SharedResource.Freight).Format("{0:F}");
            c.Add(o => o.Customer.IsVip).Titled(SharedResource.IsVip).SetWidth(70).Css("hidden-xs").RenderValueAs(o => o.Customer.IsVip ? Strings.BoolTrueLabel : Strings.BoolFalseLabel);
        };

        string url = NavigationManager.BaseUri + "odata/Orders";
        var client = new GridODataClient<Order>(HttpClient, url, query, false, "ordersGrid", columns, 10, locale)
            .Sortable()
            .Filterable()
            .SetStriped(true)
            .WithMultipleFilters()
            .WithGridItemsCount();

        _grid = client.Grid;
        // Set new items to grid
        _task = client.UpdateGrid();
        await _task;
        _shouldRender = true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        _shouldRender = false;
    }

    protected override bool ShouldRender()
    {
        return _shouldRender;
    }

    public async Task ButtonHandler()
    {
        var checkedRows = component.Checkboxes.Get("CheckboxColumn");
        await checkedRows[0].SetChecked(!checkedRows[0].IsChecked());
    }
}
