@page "/editrows"
@page "/editrows/{GridState}"
@using GridBlazor.Resources
@using GridBlazorOData.Shared.Models
@using Microsoft.Extensions.Primitives
@using System.Globalization
@using System.Text
@using System.Text.Json
@using System.Threading.Tasks
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<h1>Edit rows</h1>

<p>
    This page contains a grid that allows order edit. Its grid state is passed to the edit page, so it can be returned to this page mantaining the grid state.
</p>

<p>
    This component demonstrates a GridBlazor client-side grid with an OData back-end. For more information, please see: <a href="https://github.com/gustavnavar/Grid.Blazor">https://github.com/gustavnavar/Grid.Blazor</a>
</p>

@if (_task.IsCompleted)
{
    <div class="row">
        <div class="col-md-12">
            <GridComponent @ref="Component" T="Order" Grid="@_grid"></GridComponent>
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@code
{
    private CGrid<Order> _grid;
    private Task _task;
    private GridComponent<Order> Component;

    [Parameter]
    public string GridState { get; set; }

    protected override void OnInitialized()
    {
        CultureInfo.CurrentCulture = new CultureInfo(Program.Culture);
    }

    protected override async Task OnParametersSetAsync()
    {
        var locale = CultureInfo.CurrentCulture;

        var query = new QueryDictionary<StringValues>();
        if (!string.IsNullOrWhiteSpace(GridState))
        {
            try
            {
                query = StringExtensions.GetQuery(GridState);
            }
            catch (Exception)
            {
                // do nothing, GridState was not a valid state
            }
        }

        Action<IGridColumnCollection<Order>> columns = c =>
        {
            c.Add().Encoded(false).Sanitized(false).RenderComponentAs<ButtonCellEdit>("editrows");
            c.Add(o => o.OrderID).Titled("Number").SetWidth(100);
            c.Add(o => o.OrderDate, "OrderCustomDate").Titled("Date").Format("{0:yyyy-MM-dd}").SetWidth(120);
            c.Add(o => o.Customer.CompanyName).Titled("Company").SetWidth(250);
            c.Add(o => o.Customer.ContactName).Titled("ContactName").SetWidth(250);
            c.Add(o => o.Freight).Titled("Freight").Format("{0:F}");
            c.Add().Encoded(false).Sanitized(false).SetWidth(100).Css("hidden-xs")
                .RenderComponentAs<ButtonDbUpdate>(new List<Func<object, Task>>() { MyFirstFunction, MySecondFunction });
            c.Add(o => o.Customer.IsVip).Titled("Is Vip").SetWidth(70).Css("hidden-xs").RenderValueAs(o => o.Customer.IsVip ? Strings.BoolTrueLabel : Strings.BoolFalseLabel);
        };

        string url = NavigationManager.BaseUri + "odata/Orders";
        var client = new GridODataClient<Order>(HttpClient, url, query, false, "ordersGrid", columns, 10, locale)
            .Sortable()
            .Filterable()
            .SetStriped(true)
            .WithMultipleFilters()
            .WithGridItemsCount();

        _grid = client.Grid;
        // Set new items to grid
        _task = client.UpdateGrid();
        await _task;
    }

    private async Task MyFirstFunction(object item)
    {
        string url = NavigationManager.BaseUri + $"odata/Orders({((Order)item).OrderID})";
        var payload = new Dictionary<string, object>
        {
            { "Freight", ((Order)item).Freight + 1 }
        };
        var content = new StringContent(JsonSerializer.Serialize(payload), Encoding.UTF8, "application/json");
        await HttpClient.PatchAsync(url, content);
        await Component.UpdateGrid();
    }

    private async Task MySecondFunction(object item)
    {
        string url = NavigationManager.BaseUri + $"odata/Orders({((Order)item).OrderID})";
        var payload = new Dictionary<string, object>
        {
            { "Freight", ((Order)item).Freight - 1 }
        };
        var content = new StringContent(JsonSerializer.Serialize(payload), Encoding.UTF8, "application/json");
        await HttpClient.PatchAsync(url, content);
        await Component.UpdateGrid();
    }
}
