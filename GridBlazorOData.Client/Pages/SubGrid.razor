@page "/subgrid"
@using GridBlazor.Resources
@using GridBlazorOData.Shared.Models
@using Microsoft.Extensions.Primitives
@using System
@using System.Globalization
@using System.Threading.Tasks
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<h1>Grid with subgrids</h1>

<p>
    This page contains a grid with subgrids enabled. When an order is seleced a subgrid shows the order lines
</p>

<p>
    This component demonstrates a GridBlazor client-side grid. For more information, please see: <a href="https://github.com/gustavnavar/Grid.Blazor">https://github.com/gustavnavar/Grid.Blazor</a>
</p>

@if (_task.IsCompleted)
{
    <div class="row">
        <div class="col-md-12">
            <GridComponent T="Order" Grid="@_grid"></GridComponent>
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@code
{
    private CGrid<Order> _grid;
    private Task _task;

    protected override void OnInitialized()
    {
        CultureInfo.CurrentCulture = new CultureInfo(Program.Culture);
    }

    protected override async Task OnParametersSetAsync()
    {
        var locale = CultureInfo.CurrentCulture;

        Func<object[], Task<ICGrid>> subGrids = async keys =>
        {
            var subGridQuery = new QueryDictionary<StringValues>();

            Action<IGridColumnCollection<OrderDetail>> orderDetailColumns = c =>
            {
                c.Add(o => o.OrderID, true).SetWidth(100);
                c.Add(o => o.ProductID).Titled("ProdId").SetWidth(100);
                c.Add(o => o.Product.ProductName).Titled("ProdName").SetWidth(250);
                c.Add(o => o.Quantity).Titled("Quant").SetWidth(100).Format("{0:F}");
                c.Add(o => o.UnitPrice).Titled("Unit Price").SetWidth(100).Format("{0:F}");
                c.Add(o => o.Discount).Titled("Disc").SetWidth(100).Format("{0:F}");
            };

            string subGridUrl = NavigationManager.BaseUri + $"odata/Orders({ keys[0].ToString()})/OrderDetails";
            var subGridClient = new GridODataClient<OrderDetail>(HttpClient, subGridUrl, subGridQuery, false,
                "orderDetailsGrid" + keys[0].ToString(), orderDetailColumns, 10, locale)
                    .Sortable()
                    .Filterable()
                    .SetStriped(true)
                    .WithMultipleFilters()
                    .WithGridItemsCount();

            await subGridClient.UpdateGrid();
            return subGridClient.Grid;
        };

        var query = new QueryDictionary<StringValues>();

        Action<IGridColumnCollection<Order>> columms = c =>
        {
            c.Add(o => o.OrderID).Titled("Number").SetWidth(100);
            c.Add(o => o.OrderDate, "OrderCustomDate").Titled("Date").SetCellCssClassesContraint(o => o.OrderDate.HasValue && o.OrderDate.Value >= DateTime.Parse("1997-01-01") ? "red" : "").Format("{0:yyyy-MM-dd}").SetWidth(120);
            c.Add(o => o.Customer.CompanyName).Titled("Company").SetWidth(250);
            c.Add(o => o.Customer.ContactName).Titled("ContactName").SetWidth(250);
            c.Add(o => o.Freight).Titled("Freight").Format("{0:F}");
            c.Add(o => o.Customer.IsVip).Titled("Is Vip").SetWidth(70).Css("hidden-xs").RenderValueAs(o => o.Customer.IsVip ? Strings.BoolTrueLabel : Strings.BoolFalseLabel);
        };

        string url = NavigationManager.BaseUri + "odata/Orders";
        var client = new GridODataClient<Order>(HttpClient, url, query, false, "ordersGrid", columms, 10, locale)
            .Sortable()
            .Filterable()
            .SetStriped(true)
            .WithMultipleFilters()
            .WithGridItemsCount()
            .SubGrid(subGrids, ("OrderID", "OrderID"));

        _grid = client.Grid;
        // Set new items to grid
        _task = client.UpdateGrid();
        await _task;
    }
}
