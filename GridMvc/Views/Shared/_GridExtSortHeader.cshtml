@using GridCore
@using GridCore.Resources
@using GridShared.Sorting
@using GridShared.Utility
@using System.Text.Json
@model ISGrid

@{
    string _groupUrl;
    var sortedColumns = Model.Settings.SortSettings.SortValues.OrderBy(r => r.Id);

    //determine urls:
    var queryBuilder = new CustomQueryStringBuilder(Model.Settings.SortSettings.Query);
    var exceptQueryParameters = new List<string>();
    _groupUrl = queryBuilder.GetQueryStringExcept(exceptQueryParameters);
}

<div id="grid-extsort-@Model.RenderOptions.GridName" class="input-group grid-extsort-droppable" data-extsort-url="@_groupUrl" style="display:@(Model.HiddenExtSortingHeader ? "none;" : "flex;" )">
    @if (sortedColumns.Count() == 0)
    {
        if (Model.GroupingEnabled)
        {
            <div class="grid-extsort-empty">@Strings.GroupingText</div>
        }
        else
        {
            <div class="grid-extsort-empty">@Strings.ExtSortingText</div>
        }
    }
    else
    {
        foreach (var column in sortedColumns)
        {
            var gridColumn = Model.Columns.SingleOrDefault(r => r.Name == column.ColumnName);
            if (gridColumn == null)
            {
                continue;
            }
            var exceptParameterValues = new List<Tuple<string, string>>();
            exceptParameterValues.Add(new Tuple<string, string>(ColumnOrderValue.DefaultSortingQueryParameter, column.ToString()));
            string hrefCancel = Context.Request.PathBase + Context.Request.Path + queryBuilder.GetQueryStringExcept(exceptParameterValues);
            string href = hrefCancel;
            if (href.Length > 0)
            {
                href += "&";
            }
            ColumnOrderValue newColumn = new ColumnOrderValue(column.ColumnName,
                column.Direction == GridSortDirection.Ascending ? GridSortDirection.Descending : GridSortDirection.Ascending,
                column.Id);
            href += ColumnOrderValue.DefaultSortingQueryParameter + "=" + newColumn.ToString();
            <span class="grid-extsort-column" data-name="@column.ColumnName" data-extsortdata="@JsonSerializer.Serialize(column)">
                <span class="@(column.Direction == GridSortDirection.Ascending ? "sorted-asc" : "sorted-desc")">
                    <a href="@href" data-column="@column.ColumnName">@gridColumn.Title</a>
                    <span class="grid-sort-arrow"></span>
                </span>
                <a href="@hrefCancel" data-column="@column.ColumnName">x</a>
            </span>
        }
    }
</div>