@page "/gridsample"
@page "/gridsample/{GridState}"
@using GridBlazorServerSide.ColumnCollections
@using GridBlazorServerSide.Models
@using GridBlazorServerSide.Resources
@using GridBlazorServerSide.Services
@using GridShared.Events
@using Microsoft.Extensions.Primitives
@using System
@using System.Globalization
@using System.Threading.Tasks
@inject IOrderService orderService
@inject IOrderDetailService orderDetailService
@inject ICustomerService customerService
@inject IEmployeeService employeeService
@inject IShipperService shipperService
@inject IProductService productService

<h1>Grid with all features</h1>

<p>
    This page contains a grid that has many features enabled: filtering, sorting, searching, subgrids, conditional styles on columns and rows, etc. It also allows order editing. Its grid state is passed to the edit page, so it can be returned to this page mantaining the grid state.
</p>

<p>
    This component demonstrates a GridBlazor server-side grid. For more information, please see: <a href="https://github.com/gustavnavar/Grid.Blazor">https://github.com/gustavnavar/Grid.Blazor</a>
</p>

@if (_task.IsCompleted)
{
    <div class="row">
        <div class="col-md-9">
            <GridComponent @ref="_gridComponent" T="Order" Grid="@_grid" OnRowClickedActions="@_rowClickActions"
                           CustomFilters="@_customFilters"></GridComponent>
        </div>
        <div class="col-md-3">
            <h4>
                Order
            </h4>
            <OrderInfo @ref="_orderInfo" ReturnUrl="gridsample" Grid="@_grid"></OrderInfo>

            <h4 style="margin-top:40px;">
                Order details
            </h4>
            <OrderIDetaillnfo @ref="_orderDetailInfo"></OrderIDetaillnfo>
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@code
{
    private CGrid<Order> _grid;
    private GridComponent<Order> _gridComponent;
    private Task _task;
    private OrderInfo _orderInfo;
    private OrderIDetaillnfo _orderDetailInfo;
    private IQueryDictionary<Type> _customFilters = new QueryDictionary<Type>();
    private List<Action<object>> _rowClickActions;

    [Parameter]
    public string GridState { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _rowClickActions = new List<Action<object>>();
        _rowClickActions.Add(OrderInfo);
        _rowClickActions.Add(OrderDetailInfo);

        var locale = CultureInfo.CurrentCulture;
        SharedResource.Culture = locale;

        Func<object[], bool, bool, bool, bool, Task<IGrid>> crudSubGrids = async (keys, create, read, update, delete) =>
        {
            var subGridQuery = new QueryDictionary<StringValues>();

            Action<IGridColumnCollection<OrderDetail>> subGridColumns = c => ColumnCollections.OrderDetailColumnsCrud(c,
                productService.GetAllProducts);

            var subGridClient = new GridClient<OrderDetail>(q => orderDetailService.GetOrderDetailsGridRows(subGridColumns, keys, q),
                subGridQuery, false, "orderDetailsGrid" + keys[0].ToString(), subGridColumns, locale)
                    .Sortable()
                    .Filterable()
                    .SetStriped(true)
                    .Crud(create, read, update, delete, orderDetailService)
                    .WithMultipleFilters()
                    .WithGridItemsCount();

            await subGridClient.UpdateGrid();
            return subGridClient.Grid;
        };

        Func<object[], Task<ICGrid>> subGrids = async keys =>
        {
            var subGridQuery = new QueryDictionary<StringValues>();

            Action<IGridColumnCollection<OrderDetail>> subGridColumns = c => ColumnCollections.OrderDetailColumnsAllFeatures(c,
                productService.GetAllProducts);


            var subGridClient = new GridClient<OrderDetail>(q => orderDetailService.GetOrderDetailsGridRows(subGridColumns, keys, q),
                subGridQuery, false, "orderDetailsGrid" + keys[0].ToString(), subGridColumns, locale)
                    .SetRowCssClasses(item => item.Quantity > 10 ? "success" : string.Empty)
                    .Sortable()
                    .Filterable()
                    .SetStriped(true)
                    .Selectable(true)
                    .Crud(true, orderDetailService)
                    .WithMultipleFilters()
                    .WithGridItemsCount();

            await subGridClient.UpdateGrid();
            return subGridClient.Grid;
        };

        // build the column collection passing an action list with the action executed by the ButtonCell component
        Action<IGridColumnCollection<Order>> orderColumns = c => ColumnCollections.OrderColumnsAllFeatures(c,
            customerService.GetAllCustomers, employeeService.GetAllEmployees, shipperService.GetAllShippers,
            crudSubGrids);

        var query = new QueryDictionary<StringValues>();
        if (!string.IsNullOrWhiteSpace(GridState))
        {
            try
            {
                query = StringExtensions.GetQuery(GridState);
            }
            catch (Exception)
            {
                // do nothing, GridState was not a valid state
            }
        }
        var client = new GridClient<Order>(q => orderService.GetOrdersGridRows(orderColumns, q), query, false,
            "ordersGrid", orderColumns, locale)
            .SetRowCssClasses(item => item.Customer.IsVip ? "success" : string.Empty)
            .Sortable()
            .Filterable()
            .SetKeyboard(true)
            .Groupable(true)
            .ClearFiltersButton(true)
            .SetStriped(true)
            .WithMultipleFilters()
            .Searchable(true, false)
            .Selectable(true, true, true)
            .WithGridItemsCount()
            .ChangePageSize(true)
            .SubGrid(subGrids, ("OrderID","OrderID"))
            .Crud(true, orderService)
            .SetExcelExport(true);

        _customFilters.Add(ColumnCollections.CompanyNameFilter, typeof(CustomersFilterComponent<Order>));

        _grid = client.Grid;
        // Set new items to grid
        _task = client.UpdateGrid();
        await _task;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _gridComponent.PagerChanged += PagerChanged;
            _gridComponent.SortChanged += SortChanged;
            _gridComponent.ExtSortChanged += ExtSortChanged;
            _gridComponent.FilterChanged += FilterChanged;
            _gridComponent.SearchChanged += SearchChanged;
            _gridComponent.BeforeRefreshGrid += BeforeRefreshGrid;
            _gridComponent.AfterRefreshGrid += AfterRefreshGrid;
        }
    }

    protected void OrderInfo(object item)
    {
        if (item.GetType() == typeof(Order))
        {
            _orderInfo.Order = (Order)item;
        }
        else
        {
            _orderInfo.Order = null;
        }
        _orderInfo.Refresh();
    }

    protected void OrderDetailInfo(object item)
    {
        if (item.GetType() == typeof(OrderDetail))
        {
            _orderDetailInfo.OrderDetail = (OrderDetail)item;
        }
        else
        {
            _orderDetailInfo.OrderDetail = null;
        }
        _orderDetailInfo.Refresh();
    }

    private async Task PagerChanged(object sender, PagerEventArgs e)
    {
        Console.WriteLine("The pager has changed: EnablePaging: {0}, CurrentPage: {1}, ItemsCount: {2}, PageSize: {3}.",
            e.Pager.EnablePaging, e.Pager.CurrentPage, e.Pager.ItemsCount, e.Pager.PageSize);
        await Task.CompletedTask;
    }

    private async Task SortChanged(object sender, SortEventArgs e)
    {
        Console.WriteLine("Sorting has changed: ColumnName: {0}, Direction: {1}.",
            e.ColumnName, e.Direction);
        await Task.CompletedTask;
    }

    private async Task ExtSortChanged(object sender, ExtSortEventArgs e)
    {
        Console.WriteLine("Extended sorting has changed:");
        foreach (var sortValues in e.SortValues)
        {
            Console.WriteLine(" - ColumnName: {0}, Direction: {1}, Id: {2}.",
                sortValues.ColumnName, sortValues.Direction, sortValues.Id);
        }
        await Task.CompletedTask;
    }

    private async Task FilterChanged(object sender, FilterEventArgs e)
    {
        Console.WriteLine("Filters have changed:");
        foreach (var filteredColumn in e.FilteredColumns)
        {
            Console.WriteLine(" - ColumnName: {0}, FilterType: {1}, FilterValue: {2}.",
                filteredColumn.ColumnName, filteredColumn.FilterType, filteredColumn.FilterValue);
        }
        await Task.CompletedTask;
    }

    private async Task SearchChanged(object sender, SearchEventArgs e)
    {
        Console.WriteLine("Search has changed: SearchValue: {0}.", e.SearchValue);
        await Task.CompletedTask;
    }

    private async Task<bool> BeforeRefreshGrid()
    {
        Console.WriteLine("Grid will start refreshing");
        await Task.CompletedTask;
        return true;
    }

    private async Task AfterRefreshGrid()
    {
        Console.WriteLine("Grid has been refreshed");
        await Task.CompletedTask;
    }
}

