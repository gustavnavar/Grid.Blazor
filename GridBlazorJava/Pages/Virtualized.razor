@page "/virtualized"
@using GridBlazorJava.ColumnCollections
@using GridBlazorJava.Models
@using Microsoft.Extensions.Primitives
@using System.Globalization
@using System.Threading.Tasks
@inject HttpClient HttpClient
@inject ICrudDataService<Order> orderService

<h1>Grid Sample</h1>

<p>
    This page contains a virtualized grid
</p>

<p>
    This component demonstrates a GridBlazor client-side grid. For more information, please see: <a href="https://github.com/gustavnavar/Grid.Blazor">https://github.com/gustavnavar/Grid.Blazor</a>
</p>

@if (_task1.IsCompleted && _task2.IsCompleted)
{
    <div class="row">
        <div class="col-md-12">
            <GridComponent T="Order" Grid="@_grid"></GridComponent>
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@code
{
    private CGrid<Order> _grid;
    private IEnumerable<SelectItem> _shippers;
    private Task<List<SelectItem>> _task1;
    private Task _task2;

    protected override async Task OnParametersSetAsync()
    {
        var locale = CultureInfo.CurrentCulture;

        _task1 = HttpClient.GetFromJsonAsync<List<SelectItem>>("http://localhost:8080/" + $"api/SampleData/GetAllShippers");
        _shippers = await _task1;

        var query = new QueryDictionary<StringValues>();
        //query.Add("grid-filter", "Customer.Country__1__usa");

        Action<IGridColumnCollection<Order>> orderColumns = c =>
        ColumnCollections.VirtualizedOrderColumns(c, "http://localhost:8080/", _shippers);

        string url = "http://localhost:8080/" + "api/SampleData/GetVirtualizedOrdersGrid";
        var client = new GridClient<Order>(HttpClient, url, query, false, "ordersGrid", orderColumns, locale)
            .Sortable()
            .ExtSortable(true)
            .Filterable()
            .SetStriped(true)
            .Crud(true, orderService)
            .WithMultipleFilters()
            .WithGridItemsCount()
            //.Searchable(true, false, false)
            .SetExcelExport(true, true, "Orders")
            .RearrangeableColumns(true)
            .Virtualize(250)
            .ChangeVirtualizedHeight(true);

        _grid = client.Grid;
        // Set new items to grid
        _task2 = client.UpdateGrid();
        await _task2;
    }
}
