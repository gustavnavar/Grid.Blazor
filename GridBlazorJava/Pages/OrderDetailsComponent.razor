@using GridBlazor.Resources
@using GridBlazorJava.ColumnCollections
@using GridBlazorJava.Models
@using Microsoft.Extensions.Primitives
@using System.Globalization
@using System.Threading.Tasks
@inject HttpClient HttpClient

<div class="row">
    <div class="col-md-12">
        <GridComponent T="OrderDetail" Grid="@_grid"></GridComponent>
    </div>
</div>

<div class="form-group">
    <div class="col-md-5">
        <button type="button" class="btn btn-primary btn-md" @onclick="BackButtonClicked">@Strings.Back</button>
    </div>
</div>

@code
{
    private CGrid<OrderDetail> _grid;
    private Task _task;
    private Order _order;

    [CascadingParameter(Name = "GridComponent")]
    protected GridComponent<Order> GridComponent { get; set; }

    [Parameter]
    public object Object { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Object.GetType() == typeof(Order))
        {
            _order = (Order)Object;
        }
        else
        {
            _order = null;
        }

        var locale = CultureInfo.CurrentCulture;

        var query = new QueryDictionary<StringValues>();
        string url = "http://localhost:8080/" + "api/SampleData/GetOrderDetailsGridWithCrud?OrderId=" + _order.OrderID.ToString();

        var client = new GridClient<OrderDetail>(HttpClient, url, query, false, "orderDetailsGrid", ColumnCollections.OrderDetailColumns, locale)
            .Sortable()
            .Filterable()
            .SetStriped(true)
            .WithMultipleFilters()
            .WithGridItemsCount();

        _grid = client.Grid;
        // Set new items to grid
        _task = client.UpdateGrid();
        await _task;
    }

    protected async Task BackButtonClicked()
    {
        await GridComponent.Back();
    }
}
