@using GridBlazor.Columns
@using GridBlazor.Resources
@using GridShared
@using GridShared.Columns

@typeparam T

<h1>@Strings.Edit</h1>

<EditForm Model="@Item" OnValidSubmit="@UpdateItem">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p id="error" style="color:red;">@Error</p>
    <div class="form-horizontal">
        @foreach (var column in GridComponent.Grid.Columns)
        {
            if (((ICGridColumn)column).SubGrids == null && column.ComponentType == null
                && column.CreateComponentType == null && column.ReadComponentType == null
                && column.UpdateComponentType == null && column.DeleteComponentType == null)
            {
                if (column.FieldName == null)
                {
                    continue;
                }

                (Type type, object value) = ((IGridColumn<T>)column).GetTypeAndValue(Item);
                <div class="form-group row" style="@(column.CrudHidden.HasFlag(CrudHidden.UPDATE) && !column.ReadOnlyOnUpdate ? "display:none;" : "")">
                    @if (!string.IsNullOrWhiteSpace(column.TooltipValue))
                    {
                        <div class="col-md-2">
                            <FormTooltipComponent Column="@column"></FormTooltipComponent>
                        </div>
                    }
                    else
                    {
                        <label for="@column.FieldName" class="col-form-label col-md-2">@column.Title</label>
                    }
                    <div class="@(type == typeof(bool) ? "col-md-1" : "col-md-5")">
                        @if (column.IsPrimaryKey)
                        {
                            <input id="@column.FieldName" name="@column.FieldName" class="form-control" readonly="readonly" value="@column.GetFormatedValue(value)" />
                        }
                        else if (((IGridColumn<T>)column).IsSelectField.IsSelectKey)
                        {
                            if (column.ReadOnlyOnUpdate)
                            {
                                string text = ((IGridColumn<T>)column).GetFormatedValue(((IGridColumn<T>)column).IsSelectField.Expression, Item);
                                <input id="@column.FieldName" name="@column.FieldName" class="form-control" readonly="readonly" value="@text" />
                            }
                            else
                            {
                                var selectedValue = column.GetFormatedValue(value);
                                <select id="@column.FieldName" name="@column.FieldName" class="form-control" value="@selectedValue" @onchange="(e) => ChangeValue(e, column)">
                                    <option value="">@Strings.SelectItem</option>
                                    @foreach (var selectItem in ((IGridColumn<T>)column).SelectItems)
                                    {
                                        if (selectItem.Value == selectedValue)
                                        {
                                            <option value="@selectItem.Value" selected="selected">@selectItem.Title</option>
                                        }
                                        else
                                        {
                                            <option value="@selectItem.Value">@selectItem.Title</option>
                                        }
                                    }
                                </select>
                            }
                        }
                        else
                        {
                            if (column.ReadOnlyOnUpdate)
                            {
                                if (type == typeof(bool))
                                {
                                    if (value != null && (bool)value == true)
                                    {
                                        <input id="@column.FieldName" name="@column.FieldName" type="checkbox" class="form-control" disabled="disabled" readonly="readonly" checked="checked" value="true" />
                                    }
                                    else
                                    {
                                        <input id="@column.FieldName" name="@column.FieldName" type="checkbox" class="form-control" disabled="disabled" readonly="readonly" value="false" />
                                    }
                                }
                                else
                                {
                                    <input id="@column.FieldName" name="@column.FieldName" class="form-control" readonly="readonly" value="@column.GetFormatedValue(value)" />
                                }
                            }
                            else
                            {
                                if (type == typeof(string) && ((IGridColumn<T>)column).InputType == InputType.TextArea)
                                {
                                    <textarea id="@column.FieldName" name="@column.FieldName" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" rows="5" value="@column.GetFormatedValue(value)" @onchange="(e) => ChangeValue(e, column)" />
                                }
                                else if (type == typeof(DateTime) || type == typeof(System.DateTimeOffset))
                                {
                                    string typeAttr = ((IGridColumn<T>)column).InputType == InputType.None ? "date" : ((IGridColumn<T>)column).InputType.ToTypeAttr();
                                    if (typeAttr == "week")
                                    {
                                        if (GridComponent._isWeekSupported)
                                        {
                                            <input id="@column.FieldName" name="@column.FieldName" type="@typeAttr" placeholder="yyyy-Www" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="@(((ICGridColumn)column).GetFormatedDateTime(value, typeAttr))" @onchange="(e) => ChangeValue(e, column, typeAttr)" />
                                        }
                                        else
                                        {
                                            <input id="@column.FieldName" name="@column.FieldName" type="text" placeholder="yyyy-Www" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="@(((ICGridColumn)column).GetFormatedDateTime(value, typeAttr))" @onchange="(e) => ChangeValue(e, column, typeAttr)" />
                                        }
                                    }
                                    else if (typeAttr == "month")
                                    {
                                        if (GridComponent._isMonthSupported)
                                        {
                                            <input id="@column.FieldName" name="@column.FieldName" type="@typeAttr" placeholder="yyyy-mm" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="@(((ICGridColumn)column).GetFormatedDateTime(value, typeAttr))" @onchange="(e) => ChangeValue(e, column, typeAttr)" />
                                        }
                                        else
                                        {
                                            <input id="@column.FieldName" name="@column.FieldName" type="text" placeholder="yyyy-mm" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="@(((ICGridColumn)column).GetFormatedDateTime(value, typeAttr))" @onchange="(e) => ChangeValue(e, column, typeAttr)" />
                                        }
                                    }
                                    else if (typeAttr == "datetime-local")
                                    {
                                        if (GridComponent._isDateTimeLocalSupported)
                                        {
                                            <input id="@column.FieldName" name="@column.FieldName" type="@typeAttr" placeholder="yyyy-mm-dd hh:mm" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="@(((ICGridColumn)column).GetFormatedDateTime(value, typeAttr))" @onchange="(e) => ChangeValue(e, column, typeAttr)" />
                                        }
                                        else
                                        {
                                            <input id="@column.FieldName" name="@column.FieldName" type="text" placeholder="yyyy-mm-dd hh:mm" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="@(((ICGridColumn)column).GetFormatedDateTime(value, typeAttr))" @onchange="(e) => ChangeValue(e, column, typeAttr)" />
                                        }
                                    }
                                    else
                                    {
                                        <input id="@column.FieldName" name="@column.FieldName" type="@typeAttr" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="@(((ICGridColumn)column).GetFormatedDateTime(value, typeAttr))" @onchange="(e) => ChangeValue(e, column, typeAttr)" />
                                    }
                                }
                                else if (type == typeof(System.TimeSpan))
                                {
                                    string typeAttr = ((IGridColumn<T>)column).InputType == InputType.None ? "time" : ((IGridColumn<T>)column).InputType.ToTypeAttr();
                                    <input id="@column.FieldName" name="@column.FieldName" type="@typeAttr" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="@(((ICGridColumn)column).GetFormatedDateTime(value, typeAttr))" @onchange="(e) => ChangeValue(e, column)" />
                                }
                                else if (type == typeof(bool))
                                {
                                    if (value != null && (bool)value == true)
                                    {
                                        <input id="@column.FieldName" name="@column.FieldName" type="checkbox" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" checked="checked" value="true" @onchange="(e) => ChangeValue(e, column)" />
                                    }
                                    else
                                    {
                                        <input id="@column.FieldName" name="@column.FieldName" type="checkbox" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="false" @onchange="(e) => ChangeValue(e, column)" />
                                    }
                                }
                                else
                                {
                                    <input id="@column.FieldName" name="@column.FieldName" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="@column.GetFormatedValue(value)" @onchange="(e) => ChangeValue(e, column)" />
                                }
                                <span class="field-validation-error">
                                    <span>@ColumnErrors.Get(column.FieldName)</span>
                                </span>
                            }
                        }
                    </div>
                </div>
            }
            else if ((((ICGridColumn)column).SubGrids != null || column.UpdateComponentType != null)
                && string.IsNullOrWhiteSpace(column.TabGroup))
            {
                <div class="form-group row" style="@(column.CrudHidden.HasFlag(CrudHidden.UPDATE) && !column.ReadOnlyOnUpdate ? "display:none;" : "")">
                    @if (!string.IsNullOrWhiteSpace(column.TooltipValue))
                    {
                        <div class="col-md-2">
                            <FormTooltipComponent Column="@column"></FormTooltipComponent>
                        </div>
                    }
                    else
                    {
                        <label class="col-form-label col-md-2">@column.Title</label>
                    }
                    <div class="col-md-10">
                        <div class="card panel panel-default">
                            <div class="card-body panel-body">@_renderFragments.Get(column.Name)</div>
                        </div>
                    </div>
                </div>
            }
        }

        @if (_tabGroups != null)
        {
            foreach (var tabGruop in _tabGroups)
            {
                var tabLabels = GridComponent.Grid.Columns
                    .Where(r => r.TabGroup != null && r.TabGroup.Equals(tabGruop) && _renderFragments.Keys.Any(s => s.Equals(r.Name)))
                    .Select(r => new SelectItem(r.Name, r.Title));
                <div class="form-group row">
                    <div class="col-md-offset-2 offset-md-2 col-md-10">
                        <div class="card panel panel-default">
                            <div class="card-body panel-body">
                                <GridTabComponent TabLabels="@tabLabels" TabContent="@_renderFragments" />
                            </div>
                        </div>
                    </div>
                </div>
            }
        }

        <div class="form-group row">
            <div class="col-md-5">
                <button type="submit" class="btn btn-primary btn-md">@Strings.Save</button>
                <button type="button" class="btn btn-primary btn-md" @onclick="() => BackButtonClicked()">@Strings.Back</button>
            </div>
        </div>
    </div>
</EditForm>
