@using Agno.BlazorInputFile
@using GridBlazor.Columns
@using GridBlazor.Resources
@using GridShared
@using GridShared.Columns
@using GridShared.Utility

@typeparam T

<div class="@GridComponent.GridCrudHeaderCssClass">@(string.IsNullOrWhiteSpace(GridComponent.Grid.UpdateFormLabel) ? Strings.Edit : GridComponent.Grid.UpdateFormLabel)</div>

<EditForm Model="@Item" OnValidSubmit="@UpdateItem" @ref="Form">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p id="error" class="@GridComponent.GridErrorCssClass">@Error</p>
    <div class="form-horizontal">
        @foreach (var column in GridComponent.Grid.Columns)
        {
            if (((ICGridColumn)column).SubGrids == null && column.ComponentType == null
                && column.CreateComponentType == null && column.ReadComponentType == null
                && column.UpdateComponentType == null && column.DeleteComponentType == null)
            {
                if (column.FieldName == null)
                {
                    continue;
                }

                (Type type, object value) = ((IGridColumn<T>)column).GetTypeAndValue(Item);
                if (type == null && ((IGridColumn<T>)column).InputType != InputType.File)
                {
                    continue;
                }
                <div class="form-group row" style="@(((IGridColumn<T>)column).CrudHidden(Item).HasFlag(CrudHidden.UPDATE) && !((IGridColumn<T>)column).ReadOnlyOnUpdate(Item) ? "display:none;" : "")">
                    @if (!string.IsNullOrWhiteSpace(column.TooltipValue))
                    {
                        <div class="col-md-@column.CrudLabelWidth.ToString()">
                            <FormTooltipComponent T="@T" Column="@column"></FormTooltipComponent>
                        </div>
                    }
                    else
                    {
                        <label for="@column.FieldName" class="col-form-label col-md-@column.CrudLabelWidth.ToString()">@column.Title</label>
                    }
                    <div class="@(type == typeof(bool) && !column.ToggleSwitch ? "col-md-1" : "col-md-" + column.CrudWidth.ToString())">
                        @if (column.IsPrimaryKey)
                        {
                            <input id="@column.FieldName" name="@column.FieldName" class="form-control" readonly="readonly" value="@column.GetFormatedValue(value)" />
                        }
                        else if (((IGridColumn<T>)column).IsSelectField.IsSelectKey)
                        {
                            if (((IGridColumn<T>)column).ReadOnlyOnUpdate(Item))
                            {
                                string text = ((IGridColumn<T>)column).GetFormatedValue(((IGridColumn<T>)column).IsSelectField.Expression, Item);
                                <input id="@column.FieldName" name="@column.FieldName" class="form-control" readonly="readonly" value="@text" />
                            }
                            else
                            {
                                var selectedValue = column.GetFormatedValue(value);
                                <select id="@column.FieldName" name="@column.FieldName" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="@selectedValue" @onchange="(e) => ChangeValue(e, column)">
                                    <option value="">@Strings.SelectItem</option>
                                    @foreach (var selectItem in ((IGridColumn<T>)column).SelectItems)
                                    {
                                        if (selectItem.Value == selectedValue)
                                        {
                                            <option value="@selectItem.Value" selected="selected">@selectItem.Title</option>
                                        }
                                        else
                                        {
                                            <option value="@selectItem.Value">@selectItem.Title</option>
                                        }
                                    }
                                </select>
                                 <span class="field-validation-error">
                                    <span>@ColumnErrors.Get(column.FieldName)</span>
                                </span>
                            }
                        }
                        else if (((IGridColumn<T>)column).IsSelectColumn.IsSelectKey)
                        {
                            if (((IGridColumn<T>)column).ReadOnlyOnUpdate(Item))
                            {
                                string text = ((IGridColumn<T>)column).GetFormatedValue(((IGridColumn<T>)column).IsSelectColumn.Expression, Item);
                                <input id="@column.FieldName" name="@column.FieldName" class="form-control" readonly="readonly" value="@text" />
                            }
                            else
                            {
                                var selectedValue = column.GetFormatedValue(value);
                                <select id="@column.FieldName" name="@column.FieldName" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="@selectedValue" @onchange="(e) => ChangeValue(e, column)">
                                    <option value="">@Strings.SelectItem</option>
                                    @{
                                        var selectItems = SelectItems.Get(column.Name);
                                        if (selectItems != null && selectItems.Count() > 0)
                                        {
                                            foreach (var selectItem in selectItems)
                                            {
                                                if (selectItem.Value == selectedValue)
                                                {
                                                    <option value="@selectItem.Value" selected="selected">@selectItem.Title</option>
                                                }
                                                else
                                                {
                                                    <option value="@selectItem.Value">@selectItem.Title</option>
                                                }
                                            }
                                        }
                                    }
                                </select>
                                 <span class="field-validation-error">
                                    <span>@ColumnErrors.Get(column.FieldName)</span>
                                </span>
                            }
                        }
                        else
                        {
                            if (((IGridColumn<T>)column).ReadOnlyOnUpdate(Item))
                            {
                                if (type == typeof(bool))
                                {
                                    if (value != null && (bool)value == true)
                                    {
                                        if (column.ToggleSwitch)
                                        {
                                            <label class="col-form-label">@column.FalseLabel</label>
                                            <label class="grid-switch">
                                                <input id="@column.FieldName" name="@column.FieldName" type="checkbox" class="form-control" disabled="disabled" readonly="readonly" checked="checked" value="true" />
                                                <span class="grid-slider round"></span>
                                            </label>
                                            <label class="col-form-label">@column.TrueLabel</label>
                                        }
                                        else
                                        {
                                            <input id="@column.FieldName" name="@column.FieldName" type="checkbox" class="form-check" disabled="disabled" readonly="readonly" checked="checked" value="true" />
                                        }
                                    }
                                    else
                                    {
                                        if (column.ToggleSwitch)
                                        {
                                            <label class="col-form-label">@column.FalseLabel</label>
                                            <label class="grid-switch">
                                                <input id="@column.FieldName" name="@column.FieldName" type="checkbox" class="form-control" disabled="disabled" readonly="readonly" value="false" />
                                                <span class="grid-slider round"></span>
                                            </label>
                                            <label class="col-form-label">@column.TrueLabel</label>
                                        }
                                        else
                                        {
                                            <input id="@column.FieldName" name="@column.FieldName" type="checkbox" class="form-check" disabled="disabled" readonly="readonly" value="false" />
                                        }
                                    }
                                }
                                else if (type == typeof(string) && ((IGridColumn<T>)column).InputType == InputType.TextArea)
                                {
                                    <textarea id="@column.FieldName" name="@column.FieldName" class="form-control" rows="5" readonly="readonly" value="@column.GetFormatedValue(value)" />
                                }
                                else
                                {
                                    <input id="@column.FieldName" name="@column.FieldName" class="form-control" readonly="readonly" value="@column.GetFormatedValue(value)" />
                                }
                            }
                            else
                            {
                                if (type == typeof(string) && ((IGridColumn<T>)column).InputType == InputType.TextArea)
                                {
                                    <textarea id="@column.FieldName" name="@column.FieldName" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" rows="5" value="@column.GetFormatedValue(value)" @onchange="(e) => ChangeValue(e, column)" />
                                }
                                else if (((IGridColumn<T>)column).InputType == InputType.File)
                                {
                                    if (Files.ContainsKey(column.FieldName))
                                    {
                                        value = string.Join(";", Files[column.FieldName].Select(r => r.Name));
                                    }
                                    else
                                    {
                                        value = "";
                                    }
                                    VariableReference reference;
                                    if (InputFiles.ContainsKey(column.FieldName))
                                    {
                                        reference = InputFiles[column.FieldName];
                                    }
                                    else
                                    {
                                        reference = new VariableReference();
                                        InputFiles.Add(column.FieldName, reference);
                                    }
                                    <div class="input-group">
                                        <input type="text" id="@column.FieldName" name="@column.FieldName" class="form-control  @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="@column.GetFormatedValue(value)">
                                        <span class="input-group-btn">
                                            <button type="button" class="btn btn-default btn-primary grid-button-input-file" @onclick="() => ButtonFileClicked(column.FieldName)">@Strings.Files</button>
                                        </span>
                                        @if (column.MultipleInput)
                                        {
                                            <AgnoInputFile name="@(column.FieldName + "-file")" multiple style="display:none;" @ref="reference.Variable" OnFileChange="(files) => OnFileChange(column, files)" />
                                        }
                                        else
                                        {
                                            <AgnoInputFile name="@(column.FieldName + "-file")" style="display:none;" @ref="reference.Variable" OnFileChange="(files) => OnFileChange(column, files)" />
                                        }
                                    </div>
                                }
                                else if (type == typeof(DateTime) || type == typeof(System.DateTimeOffset))
                                {
                                    string typeAttr = ((IGridColumn<T>)column).InputType == InputType.None ? "date" : ((IGridColumn<T>)column).InputType.ToTypeAttr();
                                    if (typeAttr == "week")
                                    {
                                        if (GridComponent.IsWeekSupported)
                                        {
                                            <input id="@column.FieldName" name="@column.FieldName" type="@typeAttr" placeholder="yyyy-Www" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="@(((ICGridColumn)column).GetFormatedDateTime(value, typeAttr))" @onchange="(e) => ChangeValue(e, column, typeAttr)" />
                                        }
                                        else
                                        {
                                            <input id="@column.FieldName" name="@column.FieldName" type="text" placeholder="yyyy-Www" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="@(((ICGridColumn)column).GetFormatedDateTime(value, typeAttr))" @onchange="(e) => ChangeValue(e, column, typeAttr)" />
                                        }
                                    }
                                    else if (typeAttr == "month")
                                    {
                                        if (GridComponent.IsMonthSupported)
                                        {
                                            <input id="@column.FieldName" name="@column.FieldName" type="@typeAttr" placeholder="yyyy-mm" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="@(((ICGridColumn)column).GetFormatedDateTime(value, typeAttr))" @onchange="(e) => ChangeValue(e, column, typeAttr)" />
                                        }
                                        else
                                        {
                                            <input id="@column.FieldName" name="@column.FieldName" type="text" placeholder="yyyy-mm" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="@(((ICGridColumn)column).GetFormatedDateTime(value, typeAttr))" @onchange="(e) => ChangeValue(e, column, typeAttr)" />
                                        }
                                    }
                                    else if (typeAttr == "datetime-local")
                                    {
                                        if (GridComponent.IsDateTimeLocalSupported)
                                        {
                                            <input id="@column.FieldName" name="@column.FieldName" type="@typeAttr" placeholder="yyyy-mm-dd hh:mm" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="@(((ICGridColumn)column).GetFormatedDateTime(value, typeAttr))" @onchange="(e) => ChangeValue(e, column, typeAttr)" />
                                        }
                                        else
                                        {
                                            <input id="@column.FieldName" name="@column.FieldName" type="text" placeholder="yyyy-mm-dd hh:mm" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="@(((ICGridColumn)column).GetFormatedDateTime(value, typeAttr))" @onchange="(e) => ChangeValue(e, column, typeAttr)" />
                                        }
                                    }
                                    else
                                    {
                                        <input id="@column.FieldName" name="@column.FieldName" type="@typeAttr" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="@(((ICGridColumn)column).GetFormatedDateTime(value, typeAttr))" @onchange="(e) => ChangeValue(e, column, typeAttr)" />
                                    }
                                }
                                else if (type == typeof(System.TimeSpan))
                                {
                                    string typeAttr = ((IGridColumn<T>)column).InputType == InputType.None ? "time" : ((IGridColumn<T>)column).InputType.ToTypeAttr();
                                    <input id="@column.FieldName" name="@column.FieldName" type="@typeAttr" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="@(((ICGridColumn)column).GetFormatedDateTime(value, typeAttr))" @onchange="(e) => ChangeValue(e, column)" />
                                }
                                else if (type == typeof(bool))
                                {
                                    if (value != null && (bool)value == true)
                                    {
                                        if (column.ToggleSwitch)
                                        {
                                            <label class="col-form-label">@column.FalseLabel</label>
                                            <label class="grid-switch">
                                                <input id="@column.FieldName" name="@column.FieldName" type="checkbox" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" checked="checked" value="true" @onchange="(e) => ChangeValue(e, column)" />
                                                <span class="grid-slider round"></span>
                                            </label>
                                            <label class="col-form-label">@column.TrueLabel</label>
                                        }
                                        else
                                        {
                                            <input id="@column.FieldName" name="@column.FieldName" type="checkbox" class="form-check @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" checked="checked" value="true" @onchange="(e) => ChangeValue(e, column)" />
                                        }
                                    }
                                    else
                                    {
                                        if (column.ToggleSwitch)
                                        {
                                            <label class="col-form-label">@column.FalseLabel</label>
                                            <label class="grid-switch">
                                                <input id="@column.FieldName" name="@column.FieldName" type="checkbox" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="false" @onchange="(e) => ChangeValue(e, column)" />
                                                <span class="grid-slider round"></span>
                                            </label>
                                            <label class="col-form-label">@column.TrueLabel</label>
                                        }
                                        else
                                        {
                                            <input id="@column.FieldName" name="@column.FieldName" type="checkbox" class="form-check @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="false" @onchange="(e) => ChangeValue(e, column)" />
                                        }
                                    }
                                }
                                else if (((IGridColumn<T>)column).InputType == InputType.Number)
                                {
                                    <input type="@(InputType.Number.ToTypeAttr())" id="@column.FieldName" name="@column.FieldName" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="@column.GetFormatedValue(value)" @onchange="(e) => ChangeValue(e, column)" />
                                }
                                else
                                {
                                    <input id="@column.FieldName" name="@column.FieldName" class="form-control @(ColumnErrors.ContainsKey(@column.FieldName) ? "input-validation-error" : "")" value="@column.GetFormatedValue(value)" @onchange="(e) => ChangeValue(e, column)" />
                                }
                                <span class="field-validation-error">
                                    <span>@ColumnErrors.Get(column.FieldName)</span>
                                </span>
                            }
                        }
                    </div>
                </div>
            }
            else if ((((ICGridColumn)column).SubGrids != null || column.UpdateComponentType != null)
                && string.IsNullOrWhiteSpace(column.TabGroup))
            {
                <div class="form-group row" style="@(((IGridColumn<T>)column).CrudHidden(Item).HasFlag(CrudHidden.UPDATE) && !((IGridColumn<T>)column).ReadOnlyOnUpdate(Item) ? "display:none;" : "")">
                    @if (!string.IsNullOrWhiteSpace(column.TooltipValue))
                    {
                        <div class="col-md-@column.CrudLabelWidth.ToString()">
                            <FormTooltipComponent T="@T" Column="@column"></FormTooltipComponent>
                        </div>
                    }
                    else
                    {
                        <label class="col-form-label col-md-@column.CrudLabelWidth.ToString()">@column.Title</label>
                    }
                    @if (column.EnableCard)
                    {
                        <div class="col-md-@((12 - column.CrudLabelWidth).ToString())">
                            <div class="card panel panel-default">
                                <div class="card-body panel-body">@_renderFragments.Get(column.Name)</div>
                            </div>
                        </div>
                     }
                     else
                     {
                         <div class="col-md-@(column.CrudWidth.ToString())">
                            @_renderFragments.Get(column.Name)
                         </div>
                     }
                </div>
            }
        }

        @if (_tabGroups != null)
        {
            foreach (var tabGruop in _tabGroups)
            {
                var columns = GridComponent.Grid.Columns
                    .Where(r => r.TabGroup != null && r.TabGroup.Equals(tabGruop) && _renderFragments.Keys.Any(s => s.Equals(r.Name)));
                var tabLabels = columns.Select(r => new SelectItem(r.Name, r.Title));
                var column = columns.FirstOrDefault();
                <div class="form-group row">
                    <div class="col-md-offset-@(column.CrudLabelWidth.ToString()) offset-md-@(column.CrudLabelWidth.ToString()) col-md-@((12 - column.CrudLabelWidth).ToString())">
                        <div class="card panel panel-default">
                            <div class="card-body panel-body">
                                <GridTabComponent TabLabels="@tabLabels" TabContent="@_renderFragments" />
                            </div>
                        </div>
                    </div>
                </div>
            }
        }

        @if (GridComponent.Grid.UpdateConfirmation)
        {
            <div class="form-group row">
                <label class="col-form-label col-md-@GridComponent.Grid.UpdateConfirmationLabelWidth.ToString()">@Strings.Code</label>
                <div class="col-md-@GridComponent.Grid.UpdateConfirmationWidth.ToString()">
                    <input class="form-control" id="code" name="code" readonly="readonly" type="text" @bind="_code">
                </div>
            </div>

            <div class="form-group row">
                <label class="col-form-label col-md-@GridComponent.Grid.UpdateConfirmationLabelWidth.ToString()">@Strings.Confirm_Code</label>
                <div class="col-md-@GridComponent.Grid.UpdateConfirmationWidth.ToString()">
                    <input class="form-control" id="confirm_code" name="confirm_code" type="text" @bind="_confirmationCode">
                </div>
            </div>
        }

        <div style="display:flex;">
            <div>
                <CascadingValue Value=@this Name="GridUpdateComponent">
                    <GridUpdateButtonsComponent @ref="GridUpdateButtonsComponent" T="@T"></GridUpdateButtonsComponent>
                </CascadingValue>
                @if (((CGrid<T>)GridComponent.Grid).ButtonCrudComponents != null && ((CGrid<T>)GridComponent.Grid).ButtonCrudComponents.Count() > 0)
                {
                    @foreach (var key in ((CGrid<T>)GridComponent.Grid).ButtonCrudComponents.Keys)
                    {
                        var buttonCrudComponent = ((CGrid<T>)GridComponent.Grid).ButtonCrudComponents.Get(key);
                        if (_buttonCrudComponentVisibility.Get(key))
                        {
                            if (buttonCrudComponent.Content.HasValue)
                            {
                                <button class="btn btn-primary btn-md" type="button" title="@buttonCrudComponent.Label" @onclick="() => GridComponent.ButtonCrudComponentHandler(key)" @onclick:stopPropagation>@buttonCrudComponent.Content.Value</button>
                            }
                            else
                            {
                                <button class="btn btn-primary btn-md" type="button" title="@buttonCrudComponent.Label" @onclick="() => GridComponent.ButtonCrudComponentHandler(key)" @onclick:stopPropagation>@buttonCrudComponent.Label</button>
                            }
                        }
                    }
                }
            </div>
        </div>
    </div>
</EditForm>
