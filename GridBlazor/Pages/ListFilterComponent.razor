@using GridBlazor.Resources
@using GridShared

@typeparam T

@if (Visible)
{
<div class="dropdown dropdown-menu grid-dropdown opened" style="display:block;position:relative;@("margin-left:" + _offset.ToString() + "px;")" @ref="listFilter" @onkeyup="FilterKeyup" @onclick:stopPropagation @onkeyup:stopPropagation tabindex="-1">
    <div class="grid-dropdown-arrow" style="@("margin-left:" + (-_offset).ToString() + "px;")"></div>
    <div class="grid-dropdown-inner grid-dropdown-list-filter-class">
        <div class="grid-popup-widget">
            <div class="grid-filter-body">
                @if (_filterOptions.ShowSelectAllButtons)
                {
                    <div class="grid-buttons">
                        <div class="grid-filter-buttons">
                            <button type="button" class="btn btn-secondary" @onclick="SelectVisibleButtonClicked">
                                @Strings.SelectVisibleFilterButtonText
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="UnselectVisibleButtonClicked">
                                @Strings.UnselectVisibleFilterButtonText
                            </button>
                        </div>
                    </div>
                }
                @if (_filterOptions.ShowSearchInput)
                {
                    <div class="form-group my-2">
                        <input type="text"
                               class="grid-filter-input form-control" 
                               placeholder="@Strings.SearchFilterListInputText"
                               @oninput="FilterTextChanged"/>
                    </div>
                }
                <label><b>@Strings.FilterValueLabel:</b></label>
                <ul class="menu-list">
                    @foreach (var data in _visibleList)
                    {
                        bool isChecked = _filters.Any(x => x.Type.Equals("1") && x.Value.Equals(data.Value));
                        <li>
                            <label>
                                @if (isChecked)
                                {
                                    <input type="checkbox" class="grid-filter-list" checked value="@isChecked" @onclick="e => MyClickHandler(e, isChecked, data.Value)"/>
                                }
                                else
                                {
                                    <input type="checkbox" class="grid-filter-list" value="@isChecked" @onclick="e => MyClickHandler(e, isChecked, data.Value)"/>
                                }
                                @data.Title
                            </label>
                        </li>
                    }
                    @if (_includeIsNull)
                    {
                        bool isChecked = _filters.Any(x => x.Type.Equals("11"));
                        <li>
                            <label>
                                @if (isChecked)
                                {
                                    <input type="checkbox" class="grid-filter-list" checked value="@isChecked" @onclick="e => IsNullHandler(e, isChecked)"/>
                                }
                                else
                                {
                                    <input type="checkbox" class="grid-filter-list" value="@isChecked" @onclick="e => IsNullHandler(e, isChecked)"/>
                                }
                                @Strings.IsNull
                            </label>
                        </li>
                    }
                    @if (_includeIsNotNull)
                    {
                        bool isChecked = _filters.Any(x => x.Type.Equals("12"));
                        <li>
                            <label>
                                @if (isChecked)
                                {
                                    <input type="checkbox" class="grid-filter-list" checked value="@isChecked" @onclick="e => IsNotNullHandler(e, isChecked)"/>
                                }
                                else
                                {
                                    <input type="checkbox" class="grid-filter-list" value="@isChecked" @onclick="e => IsNotNullHandler(e, isChecked)"/>
                                }
                                @Strings.IsNotNull
                            </label>
                        </li>
                    }
                </ul>
                <div class="grid-buttons">
                    <div class="grid-filter-buttons">
                        <button type="button" class="btn btn-primary" @onclick="ApplyButtonClicked">
                            @Strings.ApplyFilterButtonText
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="grid-popup-additional">
            @if (_clearVisible)
            {
                <ul class="menu-list">
                    <li>
                        <a class="grid-filter-clear" href="javascript:void(0);" @onclick="ClearButtonClicked">
                            @Strings.ClearFilterLabel
                        </a>
                    </li>
                </ul>
            }
        </div>
    </div>
</div>
}
