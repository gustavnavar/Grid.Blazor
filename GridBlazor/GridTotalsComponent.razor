@using GridBlazor.Columns
@using GridBlazor.Resources

@inherits GridTotalsComponentBase

@if (Grid != null && !Grid.ComponentOptions.RenderRowsOnly)
{
    <tr class="grid-row"><td class="grid-cell" style="height:25px;border:none;background-color:white"></td></tr>
    var firstColumn = (ICGridColumn)Grid.Columns.FirstOrDefault();
    if (Grid.IsSumEnabled)
    {
        <tr class="grid-totals-row">
            @if (Grid.SubGridKeys != null && Grid.SubGridKeys.Length > 0)
            {
                <td class="grid-cell" data-name=""></td>
            }
            @if (firstColumn != null
             && (firstColumn.IsSumEnabled || firstColumn.IsAverageEnabled
                 || firstColumn.IsMaxEnabled || firstColumn.IsMinEnabled))
            {
                <td class="grid-cell"><b>@Strings.Sum</b></td>
            }
            @for (int i = 0; i < Grid.Columns.Count(); i++)
            {
                var column = (ICGridColumn)Grid.Columns.ElementAt(i);
                if (i == 0 && !column.IsSumEnabled && !column.IsAverageEnabled
                   && !column.IsMaxEnabled && !column.IsMinEnabled)
                {
                    <td class="grid-cell"><b>@Strings.Sum</b></td>
                }
                else
                {
                    if (column.IsSumEnabled)
                    {
                        <td class="grid-cell"><b>@column.SumString</b></td>
                    }
                    else
                    {
                        <td class="grid-cell"></td>
                    }
                }

            }
        </tr>
    }
    if (Grid.IsAverageEnabled)
    {
        <tr class="grid-totals-row">
            @if (Grid.SubGridKeys != null && Grid.SubGridKeys.Length > 0)
            {
                <td class="grid-cell" data-name=""></td>
            }
            @if (firstColumn != null
             && (firstColumn.IsSumEnabled || firstColumn.IsAverageEnabled
                 || firstColumn.IsMaxEnabled || firstColumn.IsMinEnabled))
            {
                <td class="grid-cell"><b>@Strings.Average</b></td>
            }
            @for (int i = 0; i < Grid.Columns.Count(); i++)
            {
                var column = (ICGridColumn)Grid.Columns.ElementAt(i);
                if (i == 0 && !column.IsSumEnabled && !column.IsAverageEnabled
                   && !column.IsMaxEnabled && !column.IsMinEnabled)
                {
                    <td class="grid-cell"><b>@Strings.Average</b></td>
                }
                else
                {
                    if (column.IsAverageEnabled)
                    {
                        <td class="grid-cell"><b>@column.AverageString</b></td>
                    }
                    else
                    {
                        <td class="grid-cell"></td>
                    }
                }
            }
        </tr>
    }
    if (Grid.IsMaxEnabled)
    {
        <tr class="grid-totals-row">
            @if (Grid.SubGridKeys != null && Grid.SubGridKeys.Length > 0)
            {
                <td class="grid-cell" data-name=""></td>
            }
            @if (firstColumn != null
             && (firstColumn.IsSumEnabled || firstColumn.IsAverageEnabled
                 || firstColumn.IsMaxEnabled || firstColumn.IsMinEnabled))
            {
                <td class="grid-cell"><b>@Strings.Max</b></td>
            }
            @for (int i = 0; i < Grid.Columns.Count(); i++)
            {
                var column = (ICGridColumn)Grid.Columns.ElementAt(i);
                if (i == 0 && !column.IsSumEnabled && !column.IsAverageEnabled
                   && !column.IsMaxEnabled && !column.IsMinEnabled)
                {
                    <td class="grid-cell"><b>@Strings.Max</b></td>
                }
                else
                {
                    if (column.IsMaxEnabled)
                    {
                        <td class="grid-cell"><b>@column.MaxString</b></td>
                    }
                    else
                    {
                        <td class="grid-cell"></td>
                    }
                }
            }
        </tr>
    }
    if (Grid.IsMinEnabled)
    {
        <tr class="grid-totals-row">
            @if (Grid.SubGridKeys != null && Grid.SubGridKeys.Length > 0)
            {
                <td class="grid-cell" data-name=""></td>
            }
            @if (firstColumn != null
             && (firstColumn.IsSumEnabled || firstColumn.IsAverageEnabled
                 || firstColumn.IsMaxEnabled || firstColumn.IsMinEnabled))
            {
                <td class="grid-cell"><b>@Strings.Min</b></td>
            }
            @for (int i = 0; i < Grid.Columns.Count(); i++)
            {
                var column = (ICGridColumn)Grid.Columns.ElementAt(i);
                if (i == 0 && !column.IsSumEnabled && !column.IsAverageEnabled
                   && !column.IsMaxEnabled && !column.IsMinEnabled)
                {
                    <td class="grid-cell"><b>@Strings.Min</b></td>
                }
                else
                {
                    if (column.IsMinEnabled)
                    {
                        <td class="grid-cell"><b>@column.MinString</b></td>
                    }
                    else
                    {
                        <td class="grid-cell"></td>
                    }
                }
            }
        </tr>
    }
}