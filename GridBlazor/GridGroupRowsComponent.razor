@using GridShared.Columns

@typeparam T
@inherits GridGroupRowsComponentBase<T>

@if (Grid != null && ItemsToDisplay.Any() && IsVisible)
{
    if (Grid.Settings.SortSettings.SortValues.Count > Values.Count)
    {
        foreach (object columnValue in _columnValues)
        {
            var values = new List<Tuple<string, object>>();
            values.AddRange(Values);
            values.Add(new Tuple<string, object>(_columnName, columnValue));
            var itemsToDisplay = Grid.GetItemsToDisplay(values, ItemsToDisplay);
            int count = Grid.Columns.Count();
            if (HasSubGrid)
            {
                count++;
            }
            if (RequiredTotalsColumn)
            {
                count++;
            }
            GridGroupRowsComponent<T> child;
            if (_children.TryGetValue(columnValue.ToString(), out child))
            {
                <tr class="grid-group-row">
                    <td colspan="@count">
                        @for (int i = 0; i < Values.Count; i++)
                        {
                            <span class="grid-group-tab"></span>
                        }
                        <span class="@(child.IsVisible ? "grid-group grid-group-caret-down" : "grid-group grid-group-caret")" @onclick="() => HandleGrouping(columnValue.ToString())">&nbsp;</span>
                        <span>@_column?.Title: @_column?.GetFormatedValue(columnValue)</span>
                    </td>
                </tr>
                <GridGroupRowsComponent @ref="child" T="@T" Grid="@Grid" Values="@values" HasSubGrid="@HasSubGrid" RequiredTotalsColumn="@RequiredTotalsColumn" ItemsToDisplay="@itemsToDisplay" IsVisible="@child.IsVisible"></GridGroupRowsComponent>
            }
        }
    }
    else
    {
        foreach (object item in Grid.GetItemsToDisplay(Values, ItemsToDisplay))
        {
            <tr class="grid-row @Grid.GetRowCssClasses(item)">
                @if (HasSubGrid)
                {
                    string values = "";
                    string[] keyValues = Grid.GetSubGridKeyValues(item);
                    if (keyValues.Length == Grid.SubGridKeys.Length)
                    {
                        values = string.Join(",", keyValues);
                    }
                    <td class="grid-cell grid-subgrid" data-is-rendered="false" data-is-visible="false" @(string.IsNullOrWhiteSpace(values) ? "" : "data-values=" + values) data-name="">
                        <span class="subgrid-caret">&nbsp;</span>
                    </td>
                }
                @if (RequiredTotalsColumn)
                {
                    <td class="grid-cell" data-name=""></td>
                }
                @foreach (IGridColumn column in Grid.Columns)
                {
                    <GridCellComponent T="@T" Column="@column" Item="@item"></GridCellComponent>
                }
            </tr>
            @if (HasSubGrid)
            {
                <tr class="subgrid-row" style="display:none;"></tr>
            }
        }
    }
}